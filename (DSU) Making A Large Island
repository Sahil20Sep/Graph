template<typename T>
    class dsu{
        public:
            vector<T> par, sz, rank;
            int n;
            
            dsu(int x){
                n = x;
                par.resize(n + 1);
                sz.resize(n + 1);
                rank.resize(n + 1);
                for(int i = 0; i <= n; i++){
                    par[i] = i;
                    sz[i] = 1;
                    rank[i] = 0;
                }
            }
    
            T getp(T x){
                while(par[x] != x){
                    par[x] = par[par[x]];
                    x = par[x];
                }
                return x;
            }
    
            void r(T a, T b){
                T p1 = getp(a), p2 = getp(b);
                if(p1 == p2){
                    return;
                }
                if(rank[p1] == rank[p2]){
                    rank[p1]++;
                    par[p2] = p1;
                }else{
                    if(rank[p1] < rank[p2]){
                        par[p1] = p2;
                    }else{
                        par[p2] = p1;
                    }
                }
            }
    
            void merge(T a, T b){
                T p1 = getp(a), p2 = getp(b);
                if(p1 == p2){
                    return;
                }
                if(sz[p2] > sz[p1]){
                    swap(p1, p2);
                }
                par[p2] = p1;
                sz[p1] += sz[p2];
                sz[p2] = 0;
            }
    };


class Solution {
public:
    int largestIsland(vector<vector<int>>& v) {
        int n = v.size();

        vector<vector<bool>> visited(n, vector<bool> (n, false));

        vector<pair<int, int>> movement = {
            {1, 0}, {0, 1}, {-1, 0}, {0, -1} 
        };

        dsu<int> obj(n * n);
        
        for(int i = 0; i < n; i++){
            for(int j = 0; j < n; j++){
                if(!visited[i][j] && v[i][j]){
                    visited[i][j] = true;
                    queue<pair<int, int>> Q;
                    Q.push({i, j});
                    
                    while(!Q.empty()){
                        auto f = Q.front();
                        Q.pop();
                        int row = f.first, col = f.second;
                        
                        for(auto k : movement){
                            int xx = k.first + row;
                            int yy = k.second + col;
                            if(xx >= 0 && xx < n && yy >= 0 && yy < n && !visited[xx][yy] && v[xx][yy]){
                                visited[xx][yy] = true;
                                Q.push({xx, yy});
                                int a = row * n + col, b = xx * n + yy;
                                if(obj.getp(a) != obj.getp(b)){
                                    obj.merge(a, b);
                                }
                            }
                        }
                    }
                }
            }
        }
        int ans = 0;
        for(int i = 0; i < n; i++){
            for(int j = 0; j < n; j++){
                if(!v[i][j]){
                    set<int> ms;
                    for(auto k : movement){
                        int xx = k.first + i;
                        int yy = k.second + j;
                        if(xx >= 0 && xx < n && yy >= 0 && yy < n && v[xx][yy]){
                            int a = xx * n + yy;
                            ms.insert(obj.getp(a));
                        }
                    }
                    int cnt = 1;
                    for(auto it = ms.begin(); it != ms.end(); it++){
                        cnt += obj.sz[*it];
                    }
                    ans = max(ans, cnt);
                }else{
                    ans = max(ans, obj.sz[obj.getp(i * n + j)]);
                }
            }
        }
        return ans;
    }
};
