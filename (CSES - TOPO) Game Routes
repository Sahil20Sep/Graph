int main(){
    ios::sync_with_stdio(false);
    cin.tie(0);
    ll T = 1;
    // cin >> T;
    while(T--){
        int n, m; cin >> n >> m;
 
        vector<vector<int>> graph(n + 1);
 
        vector<int> in(n + 1, 0);
 
        for(int i = 0; i < m; i++){
            int u, v; cin >> u >> v;
            graph[u].push_back(v);
            in[v]++;
        }
 
        queue<int> Q;
        
        for(int i = 2; i <= n; i++){
            if(!in[i]){
                Q.push(i);
            }
        }
 
        while(!Q.empty()){
            auto f = Q.front();
            Q.pop();
            if(f == 1){
                continue;
            }
            for(auto child : graph[f]){
                in[child]--;
                if(!in[child]){
                    Q.push(child);
                }
            }
        }
 
        Q.push(1);
 
        vector<ll> ways(n + 1, 0ll);
 
        ways[1] = 1;
 
        while(!Q.empty()){
            auto f = Q.front();
            Q.pop();
            for(auto child : graph[f]){
                ways[child] = (ways[child] + ways[f]) % mod;
                in[child]--;
                if(!in[child]){
                    Q.push(child);
                }
            }
        }
 
        cout << ways[n] << endl;
 
        sahil:; 
    }
    return 0;
}
