class Solution {
public:
    int findCheapestPrice(int n, vector<vector<int>>& v, int src, int dst, int k) {
        int s = v.size();
        vector<vector<pair<int, int>>> graph(n);
        for(int i = 0; i < s; i++){
            graph[v[i][0]].push_back({v[i][1], v[i][2]});
        }

        vector<int> dist(n, 1e9);
        dist[src] = 0;

        queue<pair<int, pair<int, int>>> Q;
        Q.push({-1, {src, 0}});

        while(!Q.empty()){
            auto f = Q.front();
            Q.pop();
            int stop = f.first, vertex = f.second.first, d = f.second.second;
            for(auto child : graph[vertex]){
                int ch = child.first;
                int wt = child.second;
                if(d + wt < dist[ch] && stop < k){
                    dist[ch] = d + wt;
                    Q.push({stop + 1, {ch, dist[ch]}});
                }
            }
        }
        return dist[dst] == 1e9 ? -1 : dist[dst];
    }
};

always use d instead of use dist[node].
