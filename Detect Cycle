bool dfs(int vertex, int par, vector<bool> &visited, vector<int> adj[]){
        visited[vertex] = true;
        bool flag = false;
        for(auto child : adj[vertex]){
            if(child == par){
                continue;
            }
            if(visited[child]){
                return true;
            }
            flag |= dfs(child, vertex, visited, adj);
        }
        return flag;
    }
  
    // Function to detect cycle in an undirected graph.
    bool isCycle(int n, vector<int> adj[]) {
        vector<bool> visited(n, false);
        bool flag = false;
        for(int i = 0; i < n; i++){
            if(!visited[i]){
                flag |= dfs(i, -1, visited, adj);
            }
        }
        return flag;
    }
    
    ------------------------------------------------------------------------------------------
    
    bool isCycle(int n, vector<int> adj[]) {
        vector<bool> visited(n, false);
        for(int i = 0; i < n; i++){
            if(!visited[i]){
                queue<pair<int, int>> Q;
                Q.push({i, -1});
                visited[i] = true;
                while(!Q.empty()){
                    auto v = Q.front();
                    Q.pop();
                    int a = v.first, b = v.second;
                    for(auto child : adj[a]){
                        if(child == b){
                            continue;
                        }
                        if(visited[child]){
                            return true;
                        }
                        Q.push({child, a});
                        visited[child] = true;
                    }
                }
            }
        }
        return false;
    }
    
O(N + 2 * E) + O(N)

---------------------------------------------------------------------------------------------

bool dfs(int vertex, vector<bool> &visited, vector<bool> &path, vector<int>adj[]){
        visited[vertex] = true;
        path[vertex] = true;
        bool flag = false;
        for(auto child : adj[vertex]){
            if(visited[child]){
                if(path[child]){
                    return true;
                }else{
                    continue;
                }
            }
            flag |= dfs(child, visited, path, adj);
        }
        path[vertex] = false;
        return flag;
    }
  
    bool isCyclic(int V, vector<int>adj[]) {
        int n = V;
        vector<bool> visited(n, false), path(n, false);
        for(int i = 0; i < n; i++){
            if(!visited[i]){
                if(dfs(i, visited, path, adj)){
                    return true;
                }
            }
        }
        return false;
    }
    
O (N + E);

also prove by topological sort
