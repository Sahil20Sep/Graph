                        (implement Trie)

struct Node{

    Node* links[26];
    bool flag = false;

    bool containKey(char ch){

        return (links[ch - 'a'] != NULL);

    }

    void put(char ch, Node* node){

        links[ch - 'a'] = node;

    }

    Node* get(char ch){

        return links[ch - 'a'];

    }

    void setEnd(){

        flag = true;

    }

    bool end(){

        return flag;
    }

};

class Trie {
public:

    Node* root;

    Trie() {
        root = new Node();
    }
    
    void insert(string word) {

        Node* node = root;
        
        for(int i = 0; i < word.size(); i++){

            if(!node -> containKey(word[i])){

                node -> put(word[i], new Node());

            }

            node = node -> get(word[i]);

        }

        node -> setEnd();
    }
    
    bool search(string word) {
        
        Node* node = root;

        for(int i = 0; i < word.size(); i++){

            if(!node -> containKey(word[i])){
                return false;
            }

            node = node -> get(word[i]);

        }

        return node -> end();
    }
    
    bool startsWith(string word) {

        Node* node = root;

        for(int i = 0; i < word.size(); i++){

            if(!node -> containKey(word[i])){
                return false;
            }

            node = node -> get(word[i]);

        }

        return true;
        
    }
};

--------------------------------------------------------------------------------------------

        (implement count_prefix and count_end)

#include <bits/stdc++.h> 

struct Node{

    Node* links[26];
    int count_prefix = 0;
    int count_end = 0;

    bool containKey(char ch){

        return (links[ch - 'a'] != NULL);

    }

    void put(char ch, Node* node){

        links[ch - 'a'] = node;

    }

    Node* get(char ch){

        return links[ch - 'a'];

    }

    // void setEnd(){

    //     flag = true;

    // }

    // bool end(){

    //     return flag;
    // }

};

class Trie{

    public:

    Node* root;

    Trie(){
        root = new Node();
    }

    void insert(string &word){
        
        Node* node = root;

        int n = word.size();

        for(int i = 0; i < n; i++){

            if(!node -> containKey(word[i])){

                node -> put(word[i], new Node());

            }

            node = node -> get(word[i]);
            
            if(i == n - 1){

                node -> count_end += 1;

            }

            node -> count_prefix += 1;

        }
    }

    int countWordsEqualTo(string &word){
        
        Node* node = root;

        int n = word.size();

        for(int i = 0; i < n; i++){

            if(!node -> containKey(word[i])){

                return 0;

            }

            node = node -> get(word[i]);

        }

        return node -> count_end;

    }

    int countWordsStartingWith(string &word){
        
        Node* node = root;

        int n = word.size();

        for(int i = 0; i < n; i++){

            if(!node -> containKey(word[i])){

                return 0;

            }

            node = node -> get(word[i]);

        }

        return node -> count_prefix;

    }

    void erase(string &word){
        
        Node* node = root;

        int n = word.size();
        
        for(int i = 0; i < n; i++){

            if(!node -> containKey(word[i])){

                return ;

            }
            
            node = node -> get(word[i]);
            
            if(i == n - 1){

                node -> count_end -= 1;

            }

            node -> count_prefix -= 1;

        }

    }
};

--------------------------------------------------------------------------------------

                (complete string)

#include <bits/stdc++.h> 

struct Node{

    Node* list[26];

    bool cnt_end = false;

    bool containKey(char ch){

        return list[ch - 'a'] != NULL;

    }

    void put(char ch, Node* node){

        list[ch - 'a'] = node;

    }

    Node* get(char ch){

        return list[ch - 'a'];

    }
};

class Trie{

    public:

    Node* root;

    Trie(){

        root = new Node();

    }

    void insert(string &word){

        Node* node = root;

        int n = word.size();

        for(int i = 0; i < n; i++){

            if(!node -> containKey(word[i])){

                node -> put(word[i], new Node());

            }

            node = node -> get(word[i]);

        }

        node -> cnt_end = true;
    }

    bool check(string &word){

        Node* node = root;

        int n = word.size();

        for(int i = 0; i < n; i++){

            node = node -> get(word[i]);

            if(node -> cnt_end == false){

                return false;

            }
        }

        return true;

    }
};

string completeString(int n, vector<string> &a){

    Trie obj;

    for(auto it : a){

        obj.insert(it);

    }

    set<string> ms;

    for(int i = 0; i < a.size(); i++){

        string s = a[i];

        if(obj.check(s)){

            if(ms.empty()){

                ms.insert(s);

            }else{

                string t = *(ms.begin());

                if(s.size() > t.size()){

                    ms.clear();

                    ms.insert(s);

                }

                if(s.size() == t.size()){

                    ms.insert(s);

                }
            }
        }
    }

    if(ms.empty()){

        return "None";

    }

    return *(ms.begin());

}

------------------------------------------------------------------------------------------

#include<bits/stdc++.h>

struct Node{

    Node* list[26];

    bool cnt_end = false;

    bool containKey(char ch){

        return list[ch - 'a'] != NULL;

    }

    void put(char ch, Node* node){

        list[ch - 'a'] = node;

    }

    Node* get(char ch){

        return list[ch - 'a'];

    }

};

int countDistinctSubstrings(string &s)
{
    int n = s.size(), ans = 0;

    Node* root = new Node();

    for(int i = 0; i < n; i++){

        Node* node = root;

        for(int j = i; j < n; j++){

            if(!node -> containKey(s[j])){

                ans++;

                node -> put(s[j], new Node());

            }

            node = node -> get(s[j]);

        }
    }

    return ans + 1;
}

--------------------------------------------------------------------------------------------

        (given arr1 and arr2 ans --> max xor)

#include<bits/stdc++.h>

struct Node{

    Node* links[2];

    bool containKey(int bit){

        return links[bit] != NULL;
    }

    void put(int bit, Node* node){

        links[bit] = node;
    }

    Node* get(int bit){

        return links[bit];
    }
};

class Trie{

    public:

    Node* root;

    Trie(){

        root = new Node();

    }

    void insert(int num){

        Node* node = root;

        for(int i = 31; i >= 0; i--){

            int bit = (num >> i) & 1;

            if(!node -> containKey(bit)){

                node -> put(bit, new Node());
                
            }

            node = node -> get(bit);

        }
    }

    int getMax(int num){

        Node* node = root;

        int maxi = 0;

        for(int i = 31; i >= 0; i--){

            int bit = (num >> i) & 1;

            if(node -> containKey(!bit)){

                maxi += (1 << i);

                node = node -> get(!bit);

            }else{

                node = node -> get(bit);

            }
        }

        return maxi;
    }
};

int maxXOR(int n, int m, vector<int> &arr1, vector<int> &arr2) 
{
    
    Trie obj;

    for(auto it : arr1){

        obj.insert(it);

    }

    int maxi = 0;

    for(auto it : arr2){

        maxi = max(maxi, obj.getMax(it));

    }

    return maxi;

}

-----------------------------------------------------------------------------------

            (offline queries) maxi xor with some condition

struct Node{

    Node* links[2];

    bool containKey(int bit){

        return links[bit] != NULL;
    }

    void put(int bit, Node* node){

        links[bit] = node;
    }

    Node* get(int bit){

        return links[bit];
    }
};

class Trie{

    public:

    Node* root;

    Trie(){

        root = new Node();

    }

    void insert(int num){

        Node* node = root;

        for(int i = 31; i >= 0; i--){

            int bit = (num >> i) & 1;

            if(!node -> containKey(bit)){

                node -> put(bit, new Node());
                
            }

            node = node -> get(bit);

        }
    }

    int getMax(int num){

        Node* node = root;

        int maxi = 0;

        for(int i = 31; i >= 0; i--){

            int bit = (num >> i) & 1;

            if(node -> containKey(!bit)){

                maxi += (1 << i);

                node = node -> get(!bit);

            }else{

                node = node -> get(bit);

            }
        }

        return maxi;
    }
};

class Solution {
public:
    vector<int> maximizeXor(vector<int>& nums, vector<vector<int>>& q) {
        
        Trie obj;

        int n = nums.size();

        vector<pair<int, pair<int, int>>> store;

        int cnt = 0;

        for(auto it : q){

            int x = it[0], m = it[1];

            store.push_back({m, {x, cnt++}});

        }

        sort(nums.begin(), nums.end());

        sort(store.begin(), store.end());

        int prev = 0;

        vector<int> ans(q.size(), -1);

        for(auto it : store){

            int m = it.first, x = it.second.first, i = it.second.second;

            while(prev < n && nums[prev] <= m){

                obj.insert(nums[prev]);

                prev++;

            }

            if(prev){

                ans[i] = obj.getMax(x);

            }

        }

        return ans;

    }
};

