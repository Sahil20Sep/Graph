vector<int> shortestPath(int n, int m, vector<vector<int>>& v){
        vector<int> in(n, 0);
        for(auto i : v){
            in[i[1]]++;
        }
        vector<vector<pair<int, int>>> graph(n);
        for(auto i : v){
            if(!in[i[0]] && i[0] != 0){
                in[i[1]]--;
                continue;
            }
            graph[i[0]].push_back({i[1], i[2]});
        }
        queue<int> Q;
        Q.push(0);
        vector<int> dist(n, INT_MAX);
        dist[0] = 0;
        while(!Q.empty()){
            auto f = Q.front();
            Q.pop();
            for(auto child : graph[f]){
                int x = child.first, y = child.second;
                in[x]--;
                if(!in[x]){
                    Q.push(x);
                }
                dist[x] = min(dist[x], dist[f] + y);
            }
        }
        for(int i = 0; i < n; i++){
            if(dist[i] == INT_MAX){
                dist[i] = -1;
            }
        }
        return dist;
    }
