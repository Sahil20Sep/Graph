vector<int> shortestPath(int n, int m, vector<vector<int>>& v){
        vector<int> in(n, 0);
        for(auto i : v){
            in[i[1]]++;
        }
        vector<vector<pair<int, int>>> graph(n);
        for(auto i : v){
            if(!in[i[0]] && i[0] != 0){
                in[i[1]]--;
                continue;
            }
            graph[i[0]].push_back({i[1], i[2]});
        }
        queue<int> Q;
        Q.push(0);
        vector<int> dist(n, INT_MAX);
        dist[0] = 0;
        while(!Q.empty()){
            auto f = Q.front();
            Q.pop();
            for(auto child : graph[f]){
                int x = child.first, y = child.second;
                in[x]--;
                if(!in[x]){
                    Q.push(x);
                }
                dist[x] = min(dist[x], dist[f] + y);
            }
        }
        for(int i = 0; i < n; i++){
            if(dist[i] == INT_MAX){
                dist[i] = -1;
            }
        }
        return dist;
    }
    
---------------------------------------------------------------

void dfs(int vertex, vector<bool> &visited, stack<int> &st, vector<vector<pair<int, int>>> &v){
        visited[vertex] = true;
        for(auto child : v[vertex]){
            if(!visited[child.first]){
                dfs(child.first, visited, st, v);
            }
        }
        st.push(vertex);
    }
  
     vector<int> shortestPath(int n, int m, vector<vector<int>>& v){
        vector<vector<pair<int, int>>> graph(n);
        for(int i = 0; i < m; i++){
            int u = v[i][0], g = v[i][1], wt = v[i][2];
            graph[u].push_back({g, wt});
        }
        vector<bool> visited(n, false);
        stack<int> st;
        for(int i = 0; i < n; i++){
            if(!visited[i]){
                dfs(i, visited, st, graph);
            }
        }
        vector<int> dist(n, 1e9);
        dist[0] = 0;
        while(!st.empty()){
            auto f = st.top();
            st.pop();
            for(auto child : graph[f]){
                if(dist[f] + child.second < dist[child.first]){
                    dist[child.first] = dist[f] + child.second;
                }
            }
        }
        for(int i = 0; i < n; i++){
            if(dist[i] == 1e9){
                dist[i] = -1;
            }
        }
        return dist;
    }


O( N + E);

the element on the top of the stack is source and sequencially find the dist.
