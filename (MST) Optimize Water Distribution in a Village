#include<bits/stdc++.h>

template<typename T>
class dsu{
    public:
        vector<T> par, sz, rank;
        int n;
        
        dsu(int x){
            n = x;
            par.resize(n + 1);
            sz.resize(n + 1);
            rank.resize(n + 1);
            for(int i = 0; i <= n; i++){
                par[i] = i;
                sz[i] = 1;
                rank[i] = 0;
            }
        }

        T getp(T x){
            while(par[x] != x){
                par[x] = par[par[x]];
                x = par[x];
            }
            return x;
        }

        void r(T a, T b){
            T p1 = getp(a), p2 = getp(b);
            if(p1 == p2){
                return;
            }
            if(rank[p1] == rank[p2]){
                rank[p1]++;
                par[p2] = p1;
            }else{
                if(rank[p1] < rank[p2]){
                    par[p1] = p2;
                }else{
                    par[p2] = p1;
                }
            }
        }

        void merge(T a, T b){
            T p1 = getp(a), p2 = getp(b);
            if(p1 == p2){
                return;
            }
            if(sz[p2] > sz[p1]){
                swap(p1, p2);
            }
            par[p2] = p1;
            sz[p1] += sz[p2];
            sz[p2] = 0;
        }
};

int supplyWater(int n, int k, vector<int> &wells, vector<vector<int>> &pipes) 
{
	vector<pair<int, pair<int, int>>> edges;
  	dsu<int> obj(n);
	for(int i = 1; i <= n; i++){
		edges.push_back({wells[i - 1], {0, i}});
	}
	for(int i = 0; i < pipes.size(); i++){
		edges.push_back({pipes[i][2], {pipes[i][0], pipes[i][1]}});
	}
	int sum = 0;
	sort(edges.begin(), edges.end());
	for(auto it : edges){
		int u = it.second.first;
		int v = it.second.second;
		int wt = it.first;
		if(obj.getp(u) == obj.getp(v)){
			continue;
		}
		obj.merge(u, v);
		sum += wt;
	}
	return sum;
}
