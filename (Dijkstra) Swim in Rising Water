class Solution {
public:
    int swimInWater(vector<vector<int>>& v) {
        int n = v.size();

        priority_queue<pair<int, pair<int, int>>, vector<pair<int, pair<int, int>>>, greater<pair<int, pair<int, int>>>> Q;
        Q.push({v[0][0], {0, 0}});

        vector<pair<int, int>> movement = {
            {1, 0}, {0, 1}, {0, -1}, {-1, 0}
        };

        vector<vector<int>> dist(n, vector<int> (n, 1e9));
        dist[0][0] = v[0][0];

        while(!Q.empty()){
            auto f = Q.top();
            Q.pop();
            int d = f.first, x = f.second.first, y = f.second.second;
            for(auto k : movement){
                int xx = x + k.first;
                int yy = y + k.second;
                if(xx >= 0 && xx < n && yy >= 0 && yy < n){
                    if(v[xx][yy] > d){
                        if(d + (v[xx][yy] - d) < dist[xx][yy]){
                            dist[xx][yy] = dist[x][y] + (v[xx][yy] - d);
                            Q.push({dist[xx][yy], {xx, yy}});
                        }
                    }else{
                        if(d < dist[xx][yy]){
                            Q.push({d, {xx, yy}});
                            dist[xx][yy] = d;
                        }
                        
                    }
                }
            }
        }
        return dist[n - 1][n - 1];
    }
};
