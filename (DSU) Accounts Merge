template<typename T>
class dsu{
    public:
        vector<T> par, sz, rank;
        int n;
        
        dsu(int x){
            n = x;
            par.resize(n + 1);
            sz.resize(n + 1);
            rank.resize(n + 1);
            for(int i = 0; i <= n; i++){
                par[i] = i;
                sz[i] = 1;
                rank[i] = 0;
            }
        }

        T getp(T x){
            while(par[x] != x){
                par[x] = par[par[x]];
                x = par[x];
            }
            return x;
        }

        void r(T a, T b){
            T p1 = getp(a), p2 = getp(b);
            if(p1 == p2){
                return;
            }
            if(rank[p1] == rank[p2]){
                rank[p1]++;
                par[p2] = p1;
            }else{
                if(rank[p1] < rank[p2]){
                    par[p1] = p2;
                }else{
                    par[p2] = p1;
                }
            }
        }

        void merge(T a, T b){
            T p1 = getp(a), p2 = getp(b);
            if(p1 == p2){
                return;
            }
            if(sz[p2] > sz[p1]){
                swap(p1, p2);
            }
            par[p2] = p1;
            sz[p1] += sz[p2];
            sz[p2] = 0;
        }
};

class Solution {
public:
    vector<vector<string>> accountsMerge(vector<vector<string>>& v) {
        int n = v.size();
        map<string, int> hash;
        dsu<int> obj(n);
        for(int i = 0; i < n; i++){
            for(int j = 1; j < v[i].size(); j++){
                if(hash[v[i][j]]){
                    int store = hash[v[i][j]];
                    obj.merge(store - 1, i);
                }else{
                    hash[v[i][j]] = i + 1;
                }
            }
        }
        map<int, set<string>> m;
        for(int i = 0; i < n; i++){
            int store = obj.getp(i);
            for(int j = 1; j < v[i].size(); j++){
                m[store].insert(v[i][j]);
            }
        }
        vector<vector<string>> ans;
        vector<string> temp;
        for(auto it : m){
            temp.push_back(v[it.first][0]);
            for(auto i = it.second.begin(); i != it.second.end(); i++){
                temp.push_back(*i);
            }
            ans.push_back(temp);
            temp.clear();
        }
        return ans;
    }
};
