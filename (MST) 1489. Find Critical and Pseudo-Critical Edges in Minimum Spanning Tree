template<typename T>
class dsu{
    public:
        vector<T> par, sz, rank;
        int n;
        
        dsu(int x){
            n = x;
            par.resize(n + 1);
            sz.resize(n + 1);
            rank.resize(n + 1);
            for(int i = 0; i <= n; i++){
                par[i] = i;
                sz[i] = 1;
                rank[i] = 0;
            }
        }

        T getp(T x){
            while(par[x] != x){
                par[x] = par[par[x]];
                x = par[x];
            }
            return x;
        }

        void r(T a, T b){
            T p1 = getp(a), p2 = getp(b);
            if(p1 == p2){
                return;
            }
            if(rank[p1] == rank[p2]){
                rank[p1]++;
                par[p2] = p1;
            }else{
                if(rank[p1] < rank[p2]){
                    par[p1] = p2;
                }else{
                    par[p2] = p1;
                }
            }
        }

        void merge(T a, T b){
            T p1 = getp(a), p2 = getp(b);
            if(p1 == p2){
                return;
            }
            if(sz[p2] > sz[p1]){
                swap(p1, p2);
            }
            par[p2] = p1;
            sz[p1] += sz[p2];
            sz[p2] = 0;
        }
};

class Solution {
public:
    vector<vector<int>> findCriticalAndPseudoCriticalEdges(int n, vector<vector<int>>& v) {

        vector<pair<int, pair<int, int>>> edges;
        
        for(auto it : v){
            int u = it[0], v = it[1], wt = it[2];
            edges.push_back({wt, {u, v}});
        }
        
        sort(edges.begin(), edges.end());

        dsu<int> obj(n);

        int sum = 0;

        for(auto it : edges){
            int u = it.second.first, v = it.second.second, wt = it.first;
            if(obj.getp(u) == obj.getp(v)){
                continue;
            }
            sum += wt;
            obj.merge(u, v);
        }

        // cout << sum << endl;

        int cnt = -1;
        
        vector<int> first, second;

        set<int> ms;

        for(auto it : v){

            dsu<int> store(n);

            cnt++;

            int u = it[0], v = it[1], wt = it[2];

            int ans = 0;

            for(auto i : edges){
                int uu = i.second.first, vv = i.second.second, wwt = i.first;
                if(u == uu && v == vv){
                    continue;
                }
                if(store.getp(uu) == store.getp(vv)){
                    continue;
                }

                store.merge(uu, vv);
                ans += wwt;
            }
            
            if(ans != sum){
                ms.insert(cnt);
                first.push_back(cnt);
            }
        }

        cnt = -1;

        for(auto it : v){

            cnt++;

            if(ms.find(cnt) != ms.end()){
                continue;
            }

            dsu<int> store(n);

            int u = it[0], v = it[1], wt = it[2];

            int ans = 0;

            store.merge(u, v);

            ans += wt;

            for(auto i : edges){
                int uu = i.second.first, vv = i.second.second, wwt = i.first;

                if(store.getp(uu) == store.getp(vv)){
                    continue;
                }

                store.merge(uu, vv);
                ans += wwt;
            }

            // cout << ans << " " << u << " " << v << endl;

            if(ans == sum){
                second.push_back(cnt);
            }
        }

        return {first, second};
    }
};
