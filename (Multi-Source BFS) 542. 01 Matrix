class Solution {
public:
    vector<vector<int>> updateMatrix(vector<vector<int>>& v) {
        int n = v.size(), m = v[0].size();
        queue<pair<int, int>> Q;
        vector<vector<int>> level(n, vector<int> (m, INT_MAX));
        for(int i = 0; i < n; i++){
            for(int j = 0; j < m; j++){
                if(!v[i][j]){
                    level[i][j] = 0;
                    Q.push({i, j});
                }
            }
        }
        vector<pair<int, int>> movement = {
            {0, -1}, {-1, 0}, {1, 0}, {0, 1}
        };
        while(!Q.empty()){
            auto i = Q.front();
            Q.pop();
            int x = i.first, y = i.second;
            for(auto k : movement){
                int xx = k.first + x;
                int yy = k.second + y;
                if(xx >= 0 && xx < n && yy >= 0 && yy < m){
                    if(level[x][y] + 1 < level[xx][yy]){
                        level[xx][yy] = 1 + level[x][y];
                        Q.push({xx, yy});
                    }
                }
            }
        }
        return level;
    }
};
