class Solution {
public:
    int shortestPathBinaryMatrix(vector<vector<int>>& v) {
        int n = v.size();
        if(v[0][0] == 1 || v[n - 1][n - 1] == 1){
            return -1;
        }
        set<pair<int, int>> ms;
        ms.insert({0, 0});

        vector<vector<int>> dist(n, vector<int> (n, 1e9));
        dist[0][0] = 1;

        vector<pair<int, int>> movement = {
            {1, 0}, {-1, 0}, {0, 1}, {0, -1},
            {1, 1}, {1, -1}, {-1, 1}, {-1, -1}
        };

        while(!ms.empty()){
            auto f = *(ms.begin());
            ms.erase(f);
            int x = f.first, y = f.second;
            for(auto k : movement){
                int xx = x + k.first;
                int yy = y + k.second;
                if(xx >= 0 && yy >= 0 && yy < n && xx < n && v[xx][yy] == 0){
                    if(dist[x][y] + 1 < dist[xx][yy]){
                        ms.insert({xx, yy});
                        dist[xx][yy] = dist[x][y] + 1;
                    }
                }
            }
        }
        if(dist[n - 1][n - 1] == 1e9){
            return -1;
        }else{
            return dist[n - 1][n - 1];
        }
    }
};
