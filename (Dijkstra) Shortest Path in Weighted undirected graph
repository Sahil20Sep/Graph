vector<int> shortestPath(int n, int m, vector<vector<int>>& e) {
        vector<vector<pair<int, int>>> graph(n + 1);
        for(int i = 0; i < m; i++){
            graph[e[i][0]].push_back({e[i][1], e[i][2]});
            graph[e[i][1]].push_back({e[i][0], e[i][2]});
        }
        set<pair<int, int>> ms;
        ms.insert({0, 1});
        
        vector<int> dist(n + 1, 1e9);
        dist[1] = 0;
        
        vector<int> dp(n + 1);
        for(int i = 0; i <= n; i++){
            dp[i] = i;
        }
        
        while(!ms.empty()){
            auto f = *(ms.begin());
            ms.erase(f);
            int a = f.first, b = f.second;
            for(auto child : graph[b]){
                int xx = child.first, yy = child.second;
                if(dist[b] + yy < dist[xx]){
                    dist[xx] = dist[b] + yy;
                    ms.insert({dist[b] + yy, xx});
                    dp[xx] = b;
                }
            }
        }
        if(dist[n] == 1e9){
            return {-1};
        }
        vector<int> ans;
        while(n != 1){
            ans.push_back(n);
            n = dp[n];
        }
        ans.push_back(1);
        reverse(ans.begin(), ans.end());
        return ans;
    }
