template<typename T>
class dsu{
    public:
        vector<T> par, sz, rank;
        int n;
        
        dsu(int x){
            n = x;
            par.resize(n + 1);
            sz.resize(n + 1);
            rank.resize(n + 1);
            for(int i = 0; i <= n; i++){
                par[i] = i;
                sz[i] = 1;
                rank[i] = 0;
            }
        }

        T getp(T x){
            while(par[x] != x){
                par[x] = par[par[x]];
                x = par[x];
            }
            return x;
        }

        void r(T a, T b){
            T p1 = getp(a), p2 = getp(b);
            if(p1 == p2){
                return;
            }
            if(rank[p1] == rank[p2]){
                rank[p1]++;
                par[p2] = p1;
            }else{
                if(rank[p1] < rank[p2]){
                    par[p1] = p2;
                }else{
                    par[p2] = p1;
                }
            }
        }

        void merge(T a, T b){
            T p1 = getp(a), p2 = getp(b);
            if(p1 == p2){
                return;
            }
            if(sz[p2] > sz[p1]){
                swap(p1, p2);
            }
            par[p2] = p1;
            sz[p1] += sz[p2];
            sz[p2] = 0;
        }
};

class Solution {
public:
    int minCostConnectPoints(vector<vector<int>>& v) {

        int n = v.size();

        vector<pair<int, pair<int, int>>> edges;

        for(int i = 0; i < n - 1; i++){
            for(int j = i + 1; j < n; j++){
                int a = v[i][0], b = v[i][1];
                int c = v[j][0], d = v[j][1];
                edges.push_back({abs(a - c) + abs(b - d), {i, j}});
            }
        }

        sort(edges.begin(), edges.end());

        int sum = 0;

        dsu<int> obj(n);
        
        for(auto it : edges){
            int wt = it.first;
            int u = it.second.first, v = it.second.second;
            if(obj.getp(u) == obj.getp(v)){
                continue;
            }
            obj.merge(u, v);
            sum += wt;
        }
        return sum;
    }
};

---------------------------------------------------------------------------------------------------------

class Solution {
public:
    int minCostConnectPoints(vector<vector<int>>& v) {

        int n = v.size();

        vector<vector<pair<int, int>>> graph(n);

        for(int i = 0; i < n - 1; i++){
            for(int j = i + 1; j < n; j++){
                int a = v[i][0], b = v[i][1];
                int c = v[j][0], d = v[j][1];
                graph[i].push_back({j, abs(a - c) + abs(b - d)});
                graph[j].push_back({i, abs(a - c) + abs(b - d)});
            }
        }

        int sum = 0;

        vector<bool> visited(n, false);
        
        priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> Q;

        Q.push({0, 0});

        while(!Q.empty()){
            auto f = Q.top();
            Q.pop();
            int wt = f.first, vertex = f.second;
            if(visited[vertex]){
                continue;
            }
            visited[vertex] = true;
            sum += wt;
            for(auto child : graph[vertex]){
                int ch = child.first, wwt = child.second;
                if(!visited[ch]){
                    Q.push({wwt, ch});
                }
            }
        }
        
        return sum;
    }
};

